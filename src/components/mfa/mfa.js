import React, { useEffect, useState } from 'react'

import axios from 'axios'

import {
    Button,
    Heading,
    Section,
    Input,
  } from '@rebeldotcom/components'

import * as S from './styles'



const MFA = () => {

    const [qrcode, setQrcode] = useState(null)
    const [token, setToken] = useState('')
    const [tokenIsValid, setTokenIsValid] = useState(false)
    const [recoveryCode, setRecoveryCode] = useState(null)

    if(!localStorage.getItem('user')){
        return (
            <div>
                <Section>Please login.</Section>
            </div>
        )
    }
    const user = JSON.parse(localStorage.getItem('user'))

    useEffect(()=>{
        axios.post('http://127.0.0.1:3000/mfa/qrcode', {user:user.userName, customerId:user.customerId})
        .then(function (response) {
            setQrcode(response.data.qrcode)
        })
        .catch(function (error) {
            // handle error
        })

    },[])

    const handleCode = (e) => {
        let value = e.target.value
        value = value.replace(/[^0-9]/g,"").slice(0,6)
        setToken(value)
        setTokenIsValid(false);

        if(value.length===6){
            axios.post('http://127.0.0.1:3000/mfa/check',{ token:value, customerId:user.customerId})
            .then(function (response) {
                if(response.data.isValid){
                    setTokenIsValid(true);
                }
            }).catch(function (error) {
                // handle error
            })
        }

    }

    const handleClick = () => {
        setTokenIsValid(false);
        setRecoveryCode(null);

        axios.post('http://127.0.0.1:3000/mfa/check',{token, customerId:user.customerId})
        .then(function (response) {
            if(response.data.isValid){
                setTokenIsValid(true);
                return axios.post('http://127.0.0.1:3000/mfa/recovery',{customerId:user.customerId});
            }
        }).then(function (response) {
            setRecoveryCode(response.data.recoveryCode)
        })
        .catch(function (error) {
            // handle error
        })
    }

    const handleRegenerate = () => {

        setRecoveryCode(null);

        axios.post('http://127.0.0.1:3000/mfa/recovery',{customerId:user.customerId})
        .then(function (response) {
            setRecoveryCode(response.data.recoveryCode)
        })
        .catch(function (error) {
            // handle error
        })
    }    

    return (
        <div>
            <S.Section>
                <Section>
                    <Heading as="h1">Security settings</Heading>
                    <h2>Two-step verification</h2>
                    <p>Require a security code in addition to your password.</p>
                    <Button id="get-started" ariaLabel="Next" onClick={()=>{}}>Get Started</Button>        
                </Section>
            </S.Section>
            <S.Section>
                <Section>
                    <Heading as="h1">Enable Two-step verification</Heading>
                    <p>Two-step verification adds an extra layer of protection to your account. Whenever you sign in to the Rebel.com website, you’ll need to enter both your password and also a security code from an authenticator app.</p>
                    <p>An authenticator app lets you generate security codes on your phone or computer. If you don’t already have one, we support any of these apps.</p>
                    <ul>
                        <li>Google Authenticator (Android/iPhone)</li>
                        <li>Duo Mobile (Android/iPhone)</li>
                        <li>Authenticator (Windows Phone 7)</li>
                    </ul>
                    <p>To configure your authenticator app:</p>
                    <ul>
                        <li>Add a new time-based token.</li>
                        <li>Use your app to scan the barcode below</li>
                    </ul>
                    {qrcode &&<img src={qrcode} />}
                    <Button id="next-1" ariaLabel="Next" onClick={()=>{}}>Next</Button>        
                </Section>  
        </S.Section>
        <S.Section> 
            <Section>
                <Heading as="h1">Enable Two-step verification</Heading>
                <p>Enter the security code generated by your mobile authenticator app to make sure it’s configured correctly.</p>
                <Input id="token" name="token" label="Token" onChange={handleCode} value={token} />
                { tokenIsValid && <strong>OK</strong>} 
                <Button id="next-2" ariaLabel="Next" onClick={()=>handleClick()}>Next</Button>  
            </Section> 
        </S.Section>
        <S.Section>                 
            <Section>
                <Heading as="h1">Enable Two-step verification</Heading>
                <p>Your security codes will be generated by your authenticator app</p>
                <p>In case you lose access to your phone, this emergency recovery code will allow you to access your accounts.</p>
                <Button id="next-3" ariaLabel="Next" onClick={()=>handleClick()}>Next</Button>  
                { recoveryCode && 
                    <div>
                        <strong>{recoveryCode}</strong>
                        <Button id="regenerate" ariaLabel="Regenerate" onClick={()=>handleRegenerate()}>Regenerate</Button>
                    </div>
                }
                <p>Write this down and keep it safe.</p>
            </Section> 
        </S.Section>
        <S.Section>             
            <Section>
                <p>From now on, when you sign in to Rebel.com, you’ll need to enter a security code from your phone.</p>    
            </Section>             
        </S.Section>
    </div>
    )
}

MFA.defaultProps = {}
MFA.propTypes = {}

export default MFA